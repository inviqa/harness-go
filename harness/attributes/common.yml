attributes.default:
  app:
    binary: app
    src_path: .
    module_path: = @('app.src_path')
    health_port: 80
    services: []
    default_port:
      name: http
      port: 80
    ingress:
      # possible ingress types are standard, istio, or ~ for none
      # note istio requires a cluster that has istio configured as the ingress controller
      type: standard
      protocol: = @('app.default_port.protocol')

  domain: my127.site
  hostname: = @('namespace') ~ '.' ~ @('domain')

  database:
    # possible platforms are mysql, postgres or ~ for none
    platform: postgres
    host: postgres
    user: app
    pass: app
    name: app
    root_pass: DV6RdNY3QcFsBk7V

  docker:
    repository: = @("workspace.name")
    tagPrefix: = ''
    config: null

  go:
    version: 1.13
  
  helm:
    timeout: 300
  
  jenkins:
    credentials:
      my127ws_key: = @('workspace.name') ~ '-my127ws-key'

  # these settings are only relevant when the respective service is enabled in
  # app.services
  persistence:
    mysql:
      enabled: true
      accessMode: ReadWriteOnce
      size: 4Gi
    postgres:
      enabled: true
      accessMode: ReadWriteOnce
      size: 4Gi

  pipeline:
    publish:
      enabled: no
    preview:
      enabled: no
      namespace: = @('workspace.name') ~ '-' ~ slugify(branch())
      hostname:  = @('pipeline.preview.namespace') ~ '.example.com'
    base:
      resourcePrefix: ~
      hostname: = @('pipeline.base.namespace') ~ '.example.com'
    qa:
      enabled: no
      namespace: = @('workspace.name') 
      hostname: = @('pipeline.qa.namespace') ~ '.' ~ @('domain')
      resourcePrefix: ~

  resources:
    requests:
      memory:
        mysql: "512Mi"
        postgres: "512Mi"
    limits:
      memory:
        mysql: "512Mi"
        postgres: "512Mi"
