command('enable'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)
    source .my127ws/harness/scripts/enable.sh

command('disable'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)
    source .my127ws/harness/scripts/disable.sh

command('destroy'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)
    source .my127ws/harness/scripts/destroy.sh

command('networks external'):
  env:
    NETWORKS: = get_docker_external_networks()
  exec: |
    #!bash(workspace:/)
    for NETWORK in ${NETWORKS}; do
      if ! docker network inspect "${NETWORK}" 2>&1 >/dev/null; then
        passthru docker network create "${NETWORK}"
      fi
    done

command('build'):
  env:
    COMPOSE_DOCKER_CLI_BUILD:  "1"
    DOCKER_BUILDKIT: "1"
  exec: |
    #!bash(workspace:/)|@
    ws external-images pull
    passthru docker-compose build

command('rebuild'): |
  #!php
  $ws->run('destroy');
  $ws->run('install');

command('app'): |
  #!bash(workspace:/)|@
  passthru docker-compose exec app bash

# this is only here to make things easier for people who are familar with the other
# harnesses, where `ws console` is used to quickly exec onto the main container
command('console'): |
  #!php
  $ws->run('app');

command('go generate'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh go generate

command('go test'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh go test -race ./...

command('go vet'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh go vet -tags=benchmarks ./...

command('go gocyclo'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh helper gocyclo

command('go gosec'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh helper gosec

command('go ineffassign'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh helper ineffassign

command('go fmt check'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    passthru test -z "$(.my127ws/harness/scripts/docker/compose-exec.sh helper fmt:check)"

command('go mod check'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh helper modules:check

command('go test coverage'):
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh go test -coverprofile=cp.out ./...
    go tool cover -html=cp.out

command('go test integration host'):
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/integration/host-run.sh

command('go test integration host <test-name>'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
    TEST_NAME: = input.argument('test-name')
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/integration/host-run.sh "${TEST_NAME}"

command('go test integration'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/integration/run.sh

command('go test integration <test-name>'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
    TEST_NAME: = input.argument('test-name')
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/integration/run.sh "${TEST_NAME}"

command('go bench compare'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh .my127ws/harness/scripts/bench/compare.sh

command('go bench report'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh .my127ws/harness/scripts/bench/report.sh

command('go bench current'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh go test -count=5 -bench=. -benchmem --tags=benchmarks ./benchmarks/

command('go bench'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    ws go bench current

command('go fmt'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh @('go.formatter') -w -l .

command('recompile'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
    COMPOSE_DOCKER_CLI_BUILD: "1"
    DOCKER_BUILDKIT: "1"
  exec: |
    #!bash(workspace:/)|@
    if docker-compose ps app | grep -q 'exited'; then
      echo "rebuilding app container" >&2
      passthru docker-compose up -d --build app
    fi
    echo "go mod download" >&2
    .my127ws/harness/scripts/docker/compose-exec.sh go mod download
    echo "go build -o /go/bin/app" >&2
    .my127ws/harness/scripts/docker/compose-exec.sh go build -o /go/bin/app .
    passthru docker-compose restart app

command('use prod'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    passthru ws harness prepare
    passthru ws build-prod
    passthru docker-compose up -d app

# borrowed from https://github.com/inviqa/harness-base-php/blob/1.2.x/src/_base/harness/config/commands.yml#L179
command('set <attribute> <value>'):
  env:
    ATTR_KEY: = input.argument('attribute')
    ATTR_VAL: = input.argument('value')
  exec: |
    #!bash(workspace:/)|=
    if [ ! -f workspace.yml ]; then
      touch workspace.yml
    fi
    if grep -q "attribute('${ATTR_KEY}'):" workspace.yml; then
      echo "Removing old '${ATTR_KEY}' setting from workspace.yml"
      sed "/^attribute('${ATTR_KEY}'): .*$/d" workspace.yml > workspace.yml.tmp && mv workspace.yml.tmp workspace.yml
    fi
    if grep -q "attribute('${ATTR_KEY}'):" workspace.yml; then
      echo 'Could not remove line from workspace.yml, failing'
      exit 1
    fi
    echo "Setting '${ATTR_KEY}' setting to '${ATTR_VAL}' in workspace.yml"
    echo "" >> workspace.yml
    echo "attribute('${ATTR_KEY}'): ${ATTR_VAL}" >> workspace.yml

command('get <attribute>'):
  env:
    VALUE: = @(input.argument('attribute'))
  exec: |
    #!bash(workspace:/)|@
    echo "$VALUE"

command('pact publish <tag> <version>'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
    PACT_VERSION_TAG: = input.argument('tag')
    PACT_VERSION: = input.argument('version')
  exec: |
    #!bash(workspace:/)|@
    .my127ws/harness/scripts/docker/compose-exec.sh pact-broker publish @('pact.app_path') -a "${PACT_VERSION}" -t "${PACT_VERSION_TAG}"
