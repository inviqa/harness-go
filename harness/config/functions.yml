function('to_yaml', [data, indentation, nesting]): |
  #!php
  if ($indentation || $nesting) {
    trigger_error('to_yaml indentation and nesting is deprecated, use to_nice_yaml instead. to_yaml will in the future render to a single line', E_USER_DEPRECATED);
  }
  $yaml = \Symfony\Component\Yaml\Yaml::dump($data, 100, 2);
  if (is_array($data) && count($data) > 0) {
    $yaml = "\n" . rtrim(preg_replace('/^/m', str_repeat(' ', $nesting ?: 2), $yaml), "\n");
  }
  = $yaml;

function('to_nice_yaml', [data, indentation, nesting]): |
  #!php
  $yaml = \Symfony\Component\Yaml\Yaml::dump($data, 100, 2);
  if (is_array($data) && count($data) > 0) {
    $yaml = "\n" . rtrim(preg_replace('/^/m', str_repeat(' ', $nesting ?: 2), $yaml), "\n");
  }
  = $yaml;

function('deep_merge', [arrays]): |
  #!php
  // source https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_array_merge_deep_array/7.x
  $deepMerge = function ($arrays) use (&$deepMerge) {
    $result = array();
    foreach ($arrays as $array) {
        if ($array === null) { continue; }
        foreach ($array as $key => $value) {
            // Renumber integer keys as array_merge_recursive() does. Note that PHP
            // automatically converts array keys that are integer strings (e.g., '1')
            // to integers.
            if (is_integer($key)) {
                $result[] = $value;
            }
            elseif (isset($result[$key]) && is_array($result[$key]) && is_array($value)) {
                $result[$key] = $deepMerge(array(
                    $result[$key],
                    $value,
                ));
            }
            else {
                $result[$key] = $value;
            }
        }
    }
    return $result;
  };
  = $deepMerge($arrays);

function('docker_config', [attrConfig]): |
  #!php
  $config = [
    'auths' => [
      $attrConfig['url'] => [
        'auth' => base64_encode($attrConfig['username'].':'.$attrConfig['password'])
      ]
    ]
  ];
  
  = json_encode($config);

function('branch'): |
  #!bash(workspace:/)
  =$(git branch | grep \* | cut -d ' ' -f2)

function('deep_merge_to_yaml', [arrays, indentation, nesting]): |
  #!php
  trigger_error('deep_merge_to_yaml is deprecated, please use separate deep_merge and to_yaml functions', E_USER_DEPRECATED);
  // source https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_array_merge_deep_array/7.x
  $deepMerge = function ($arrays) use (&$deepMerge) {
    $result = array();
    foreach ($arrays as $array) {
        if ($array === null) { continue; }
        foreach ($array as $key => $value) {
            // Renumber integer keys as array_merge_recursive() does. Note that PHP
            // automatically converts array keys that are integer strings (e.g., '1')
            // to integers.
            if (is_integer($key)) {
                $result[] = $value;
            }
            elseif (isset($result[$key]) && is_array($result[$key]) && is_array($value)) {
                $result[$key] = $deepMerge(array(
                    $result[$key],
                    $value,
                ));
            }
            else {
                $result[$key] = $value;
            }
        }
    }
    return $result;
  };
  $text = $deepMerge($arrays);
  = preg_replace('/^/m', str_repeat(' ', $nesting ?: 2), \Symfony\Component\Yaml\Yaml::dump($text, 100, $indentation ?: 2));

function('slugify', [text]): |
  #!php
  $text = preg_replace('~[^\pL\d]+~u', '-', $text);
  $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);
  $text = preg_replace('~[^-\w]+~', '', $text);
  $text = trim($text, '-');
  $text = preg_replace('~-+~', '-', $text);
  $text = strtolower($text);
  = $text;

function('filter_local_services', [services]): |
  #!php
  $filteredServices = [];
  foreach ($services as $serviceName => $service) {
    $filteredService = [];
    foreach ($service as $key => $value) {
      switch ($key) {
        case 'environment':
        case 'enabled':
        case 'image':
        case 'resources':
          $filteredService[$key] = $value;
      }
    }
    if (count($filteredService) > 0) {
      $filteredServices[$serviceName] = $filteredService;
    }
  }
  = $filteredServices;

function('get_docker_external_networks', [compose_bin]): |
  #!php
  $configRaw = shell_exec($compose_bin . ' config');
  $config = \Symfony\Component\Yaml\Yaml::parse($configRaw);
  $externalNetworks = [];
  if (isset($config['networks'])) {
    foreach ($config['networks'] as $network) {
      if (isset($network['external'])) {
        if (is_array($network['external'])) {
          $externalNetworks[] = $network['external']['name'];
        } else if ($network['external'] === true) {
          $externalNetworks[] = $network['name'];
        }
      }
    }
  }
  = join(" ", $externalNetworks);

function('docker_service_images', [compose_bin]): |
  #!php
  $configRaw = shell_exec($compose_bin . ' config');
  $config = \Symfony\Component\Yaml\Yaml::parse($configRaw);
  $images = [];

  foreach ($config['services'] as $serviceName => $service) {
    $imageSpec = [
      'image' => $service['image'] ?? null,
      'platform' => $service['platform'] ?? null,
      'upstream' => [],
    ];

    $aliases = [];

    if ($imageSpec['image'] && strpos($imageSpec['image'], ':') === false) {
      $imageSpec['image'] .= ':latest';
    }

    if (isset($service['build'])) {
      $dockerfilePath = $service['build']['dockerfile'] ?? 'Dockerfile';
      if (substr($dockerfilePath, 0, 1) !== '/') {
        $dockerfilePath = rtrim($service['build']['context'], '/') . '/' . $dockerfilePath;
      }

      if (preg_match_all('/^FROM\s+(?:--platform=([^\s]+)\s+)?([^\s]*)(?:\s+AS\s+([^\s]+))?/mi', file_get_contents($dockerfilePath), $matches, PREG_SET_ORDER) === false) {
        continue;
      }

      foreach ($matches as $match) {
        // Skip FROM <existing-alias>, as only the upstream images needed
        if (in_array($match[2], $aliases)) {
          continue;
        }
        // Docker uses :latest tag if no explicit tag listed
        if ($match[2] != 'scratch' && strpos($match[2], ':') === false) {
          $match[2] .= ':latest';
        }
        if (isset($match[3])) {
          $aliases[] = $match[3];
        }
        switch ($match[1]) {
          case '$BUILDPLATFORM':
            $platform = null;
            break;
          case '$TARGETPLATFORM':
          case null:
            $platform = $imageSpec['platform'];
            break;
          default:
            $platform = $match[1];
        }
        $imageSpec['upstream'][] = [
          'image' => $match[2],
          'platform' => $platform,
        ];
      }
    }
    $images[$serviceName] = $imageSpec;
  }

  = $images;

function('get_docker_registry', [dockerRepository]): |
  #!php
  $dockerRepoParts = explode('/', $dockerRepository);
  if (strpos($dockerRepoParts[0], '.') !== false) {
      $registry = $dockerRepoParts[0];
  }
  = $registry ?? 'https://index.docker.io/v1/';


function('go_mod_exists', [modulePath]): |
  #!php
  = file_exists($modulePath . '/go.mod');

function('escapeshellarg', [value]): |
  #!php
  = escapeshellarg($value);

function('json_encode', [value]): |
  #!php
  = json_encode($value);

function('sanitize_additional_binary_path', [path]): |
  #!php
  if (strpos($path, "/") === 0) {
      trigger_error(sprintf("Your additional_binary path (%s) contains a leading slash, please remove it.", $path), E_USER_ERROR);
  }
  = str_replace("/", "-", $path);

function('path_split', [paths]): |
  #!php
  $splitPaths = [];
  array_walk($paths, function($path) use (&$splitPaths) {
      $parts = explode(":", $path);
      if (count($parts) != 2) {
          return;
      }
      $splitPaths[$parts[0]] = $parts[1];
  });

  = $splitPaths;

function('host_architecture', [style]): |
  #!php
  $arch = php_uname('m');
  if ($style == 'native') {
    $result = $arch;
  } else if (empty($style) || $style == 'go') {
    $goArchMap = [
        'i386' => '386',
        'x86_64' => 'amd64',
        'aarch64' => 'arm64',
        'armv7l' => 'arm',
        'armv6l' => 'arm',
    ];
    $result = $goArchMap[$arch] ?? $arch;
  } else {
    throw new \Exception(sprintf('error: unknown host_architecture style "%s"', $style));
  }

  = $result;
