function('to_yaml', [text, indentation, nesting]): |
  #!php
  = preg_replace('/^/m', str_repeat(' ', $nesting ?: 2), \Symfony\Component\Yaml\Yaml::dump($text, 100, $indentation ?: 2));

function('branch'): |
  #!bash(workspace:/)
  =$(git branch | grep \* | cut -d ' ' -f2)

function('deep_merge_to_yaml', [arrays, indentation, nesting]): |
  #!php
  // source https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_array_merge_deep_array/7.x
  $deepMerge = function ($arrays) use (&$deepMerge) {
    $result = array();
    foreach ($arrays as $array) {
        if ($array === null) { continue; }
        foreach ($array as $key => $value) {
            // Renumber integer keys as array_merge_recursive() does. Note that PHP
            // automatically converts array keys that are integer strings (e.g., '1')
            // to integers.
            if (is_integer($key)) {
                $result[] = $value;
            }
            elseif (isset($result[$key]) && is_array($result[$key]) && is_array($value)) {
                $result[$key] = $deepMerge(array(
                    $result[$key],
                    $value,
                ));
            }
            else {
                $result[$key] = $value;
            }
        }
    }
    return $result;
  };
  $text = $deepMerge($arrays);
  = preg_replace('/^/m', str_repeat(' ', $nesting ?: 2), \Symfony\Component\Yaml\Yaml::dump($text, 100, $indentation ?: 2));

function('slugify', [text]): |
  #!php
  $text = preg_replace('~[^\pL\d]+~u', '-', $text);
  $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);
  $text = preg_replace('~[^-\w]+~', '', $text);
  $text = trim($text, '-');
  $text = preg_replace('~-+~', '-', $text);
  $text = strtolower($text);
  = $text;

function('get_docker_external_networks'): |
  #!php
  $configRaw = shell_exec('docker-compose config');
  $config = \Symfony\Component\Yaml\Yaml::parse($configRaw);
  $externalNetworks = [];
  if (isset($config['networks'])) {
    foreach ($config['networks'] as $network) {
      if (isset($network['external'])) {
        if (is_array($network['external'])) {
          $externalNetworks[] = $network['external']['name'];
        } else if ($network['external'] === true) {
          $externalNetworks[] = $network['name'];
        }
      }
    }
  }
  = join(" ", $externalNetworks);

function('go_mod_exists', [modulePath]): |
  #!php
  = file_exists($modulePath . '/go.mod');
