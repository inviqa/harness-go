command('build-prod'):
  env:
    COMPOSE_DOCKER_CLI_BUILD: "1"
    DOCKER_BUILDKIT: "1"
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/docker/build-prod.sh

command('app publish'):
  env:
    COMPOSE_DOCKER_CLI_BUILD: "1"
    DOCKER_BUILDKIT: "1"
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/docker/publish.sh @('docker.registry.url') @('docker.registry.username') @('docker.registry.password')

command('app deploy <environment>'):
  env:
    ENVIRONMENT: = input.argument('environment')
    NAMESPACE:   = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
    CLUSTER:     = @('pipeline.' ~ input.argument('environment') ~ '.cluster.name')
    TIMEOUT:     = @('helm.timeout')
  exec: |
    #!bash(harness:/helm)|=
    set -o pipefail
    cd "${ENVIRONMENT}"
    doctl -t $DO_ACCESS_TOKEN kubernetes cluster kubeconfig show $CLUSTER > kubectl.config.yaml
    if helm version --short --client | grep '^Client: v2' >/dev/null 2>&1; then
      passthru helm init --client-only
    fi
    passthru helm dependency build
    passthru helm --kubeconfig=$PWD/kubectl.config.yaml upgrade --wait --install --timeout "${TIMEOUT}" --namespace "${NAMESPACE}" "${NAMESPACE}" ./

command('helm template <chart-path>'):
  env:
    CHART_PATH:  = input.argument('chart-path')
    K8S_VERSION: = @('helm.kubernetes_version')
    NAMESPACE:   = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
  exec: |
    #!bash(harness:/helm)|=
    set -o pipefail
    cd "${CHART_PATH}"
    if helm version --short --client | grep '^Client: v2' >/dev/null 2>&1; then
      passthru helm init --client-only
    fi
    passthru helm dependency build
    passthru helm template --kube-version "${K8S_VERSION}" .

command('helm kubeval <chart-path>'):
  env:
    CHART_PATH: = input.argument('chart-path')
    K8S_VERSION: = @('helm.kubernetes_version')
    NAMESPACE: = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
    ADDITIONAL_SCHEMA_LOCATIONS: = @('helm.additional_schema_locations')
  exec: |
    #!bash(harness:/helm)|=
    set -o pipefail
    cd "${CHART_PATH}"
    if helm version --short --client | grep '^Client: v2' >/dev/null 2>&1; then
      passthru helm init --client-only
    fi
    
    passthru helm dependency build
    
    if readlink "${HELM_HOME:-$HOME}/.helm/plugins/helm-kubeval" | grep '/https-github.com-instrumenta-helm-kubeval$' >/dev/null; then
      passthru helm plugin remove kubeval
    fi
    passthru helm plugin install https://github.com/inviqa/helm-kubeval || true
    KUBEVAL_OPTS=(
      --kubernetes-version "${K8S_VERSION}"
      --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master
    )

    if [ -n "${ADDITIONAL_SCHEMA_LOCATIONS:-}" ]; then
      KUBEVAL_OPTS+=(--additional-schema-locations "${ADDITIONAL_SCHEMA_LOCATIONS}")
    fi
    passthru helm kubeval "${KUBEVAL_OPTS[@]}" .
