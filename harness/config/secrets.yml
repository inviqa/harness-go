command('secret image-pull-config'):
  env:
    SEALED_SECRETS: "= @('helm.feature.sealed_secrets') ? 'yes' : 'no'"
    DEFAULT_CONFIG: = docker_config(@('docker'))
    SEALED_SECRETS_CONTROLLER_NAME: = @('helm.sealed_secrets.controller_name')
    SEALED_SECRETS_CONTROLLER_NAMESPACE: = @('helm.sealed_secrets.controller_namespace')
  exec: |
    #!bash
    if [ "$SEALED_SECRETS" == 'yes' ] && ! command -v kubeseal >/dev/null; then
      echo 'kubeseal is needed in order to use this command' >&2
      exit 1
    fi

    if [ -t 1 ] ; then
      # Use an editor with a temp file to allow longer terminal input
      TMPFILE="$(mktemp -t tmp.XXXXXXXXX)"
      "${EDITOR:-vi}" "${TMPFILE}"
      DOCKER_CONFIG="$(cat "${TMPFILE}")"
      rm -f "${TMPFILE}"
    else
      # read from stdin until EOF
      DOCKER_CONFIG="$(cat)"
    fi

    DOCKER_CONFIG="${DOCKER_CONFIG:-${DEFAULT_CONFIG}}"

    if [ "$SEALED_SECRETS" == 'yes' ]; then
      echo 'Encrypting as a sealed-secret value with certificate from current kubectl context' >&2
      KUBESEAL_OPTS=(
        --name "image-pull-config"
        --scope cluster-wide 
      )
      if [ -n "${SEALED_SECRETS_CONTROLLER_NAME:-}" ]; then
        KUBESEAL_OPTS+=(
          --controller-name "${SEALED_SECRETS_CONTROLLER_NAME}"
        )
      fi
      if [ -n "${SEALED_SECRETS_CONTROLLER_NAMESPACE:-}" ]; then
        KUBESEAL_OPTS+=(
          --controller-namespace "${SEALED_SECRETS_CONTROLLER_NAMESPACE}"
        )
      fi

      echo "${DOCKER_CONFIG}" | kubeseal --raw "${KUBESEAL_OPTS[@]}"
    else
      echo 'Note: this has unencrypted credentials in, do not save directly to file' >&2
      echo "If storing within workspace attributes, use `ws secret encrypt` first" >&2
      echo "${DOCKER_CONFIG}" | base64
    fi
