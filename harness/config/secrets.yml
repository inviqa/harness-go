command('secret image-pull-config [--cert=<cert>] [--scope=<scope>] [--namespace=<namespace>]'):
  env:
    SEALED_SECRETS: "= @('helm.feature.sealed_secrets') ? 'yes' : 'no'"
    DEFAULT_CONFIG: = docker_config(@('docker.registry'))
    SEALED_SECRETS_CONTROLLER_NAME: = @('helm.sealed_secrets.controller_name')
    SEALED_SECRETS_CONTROLLER_NAMESPACE: = @('helm.sealed_secrets.controller_namespace')
    SEALED_SECRETS_CERTIFICATE_FILE: "= input.option('cert') ?: @('helm.sealed_secrets.certificate_file')"
    SECRET_NAMESPACE: "= input.option('namespace') ?: @('helm.sealed_secrets.namespace')"
    SECRET_SCOPE: "= input.option('scope') ?: @('helm.sealed_secrets.scope')"
  exec: |
    #!bash
    if [ "$SEALED_SECRETS" == 'yes' ] && ! command -v kubeseal >/dev/null; then
      echo 'kubeseal is needed in order to use this command' >&2
      exit 1
    fi

    if [ -t 0 ] ; then
      # Use an editor with a temp file to allow longer terminal input
      TMPFILE="$(mktemp -t tmp.XXXXXXXXX)"
      "${EDITOR:-vi}" "${TMPFILE}"
      DOCKER_CONFIG="$(cat "${TMPFILE}")"
      rm -f "${TMPFILE}"
    else
      # read from stdin until EOF
      DOCKER_CONFIG="$(cat)"
    fi

    DOCKER_CONFIG="${DOCKER_CONFIG:-${DEFAULT_CONFIG}}"

    if [ "$SEALED_SECRETS" == 'yes' ]; then
      echo 'Encrypting as a sealed-secret value with certificate from current kubectl context' >&2
      DEFAULT_SCOPE=cluster-wide
      KUBESEAL_OPTS=(
        --name "image-pull-config"
      )
      if [ -n "${SEALED_SECRETS_CONTROLLER_NAME:-}" ]; then
        KUBESEAL_OPTS+=(
          --controller-name "${SEALED_SECRETS_CONTROLLER_NAME}"
        )
      fi
      if [ -n "${SEALED_SECRETS_CONTROLLER_NAMESPACE:-}" ]; then
        KUBESEAL_OPTS+=(
          --controller-namespace "${SEALED_SECRETS_CONTROLLER_NAMESPACE}"
        )
      fi
      if [ -n "${SEALED_SECRETS_CERTIFICATE_FILE:-}" ]; then
        KUBESEAL_OPTS+=(
          --cert "${SEALED_SECRETS_CERTIFICATE_FILE}"
        )
      fi
      if [ -n "${SECRET_NAMESPACE:-}" ]; then
        DEFAULT_SCOPE=namespace-wide
        KUBESEAL_OPTS+=(--namespace "$SECRET_NAMESPACE")
      fi
      KUBESEAL_OPTS+=(--scope "${SECRET_SCOPE:-$DEFAULT_SCOPE}")

      echo -n "${DOCKER_CONFIG}" | passthru kubeseal --raw "${KUBESEAL_OPTS[@]}"
    else
      echo 'Note: this has unencrypted credentials in, do not save directly to file' >&2
      echo "If storing within workspace attributes, use `ws secret encrypt` first" >&2
      echo "${DOCKER_CONFIG}" | base64
    fi

command('sealed-secret encrypt (string|blob) [--cert=<cert>] [--scope=<scope>] [--namespace=<namespace>] <secret-name>'):
  env:
    INPUT_TYPE: = input.command(3)
    SEALED_SECRETS_CONTROLLER_NAME: = @('helm.sealed_secrets.controller_name')
    SEALED_SECRETS_CONTROLLER_NAMESPACE: = @('helm.sealed_secrets.controller_namespace')
    SEALED_SECRETS_CERTIFICATE_FILE: "= input.option('cert') ?: @('helm.sealed_secrets.certificate_file')"
    SECRET_NAME: = input.argument('secret-name')
    SECRET_NAMESPACE: "= input.option('namespace') ?: @('helm.sealed_secrets.namespace')"
    SECRET_SCOPE: "= input.option('scope') ?: @('helm.sealed_secrets.scope')"
  exec: |
    #!bash
    if ! command -v kubeseal >/dev/null; then
      echo 'kubeseal is needed in order to use this command' >&2
      exit 1
    fi

    echo "Enter the secret ${INPUT_TYPE} to encrypt" >&2
    case "${INPUT_TYPE}" in
      string)
        read DATA # read a single line
        ;;
      blob)
        if [ -t 0 ] ; then
          # Use an editor with a temp file to allow longer terminal input
          TMPFILE="$(mktemp -t tmp.XXXXXXXXX)"
          "${EDITOR:-vi}" "${TMPFILE}"
          DATA="$(cat "${TMPFILE}")"
          rm -f "${TMPFILE}"
        else
          # read from stdin until EOF
          DATA="$(cat)"
        fi
        ;;
    esac

    echo 'Encrypting as a sealed-secret value with certificate from current kubectl context' >&2
    DEFAULT_SCOPE=cluster-wide
    KUBESEAL_OPTS=(
      --name "${SECRET_NAME}"
    )
    if [ -n "${SEALED_SECRETS_CONTROLLER_NAME:-}" ]; then
      KUBESEAL_OPTS+=(
        --controller-name "${SEALED_SECRETS_CONTROLLER_NAME}"
      )
    fi
    if [ -n "${SEALED_SECRETS_CONTROLLER_NAMESPACE:-}" ]; then
      KUBESEAL_OPTS+=(
        --controller-namespace "${SEALED_SECRETS_CONTROLLER_NAMESPACE}"
      )
    fi
    if [ -n "${SEALED_SECRETS_CERTIFICATE_FILE:-}" ]; then
      KUBESEAL_OPTS+=(
        --cert "${SEALED_SECRETS_CERTIFICATE_FILE}"
      )
    fi
    if [ -n "${SECRET_NAMESPACE:-}" ]; then
      DEFAULT_SCOPE=namespace-wide
      KUBESEAL_OPTS+=(--namespace "$SECRET_NAMESPACE")
    fi
    KUBESEAL_OPTS+=(--scope "${SECRET_SCOPE:-$DEFAULT_SCOPE}")

    echo -n "${DATA}" | passthru kubeseal --raw "${KUBESEAL_OPTS[@]}"
