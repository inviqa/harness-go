function('external_images', [services]): |
  #!php
  $upstreamImages = $producedImages = [];
  $excludeImages = ['scratch'];

  foreach ($services as $service) {
    if (count($service['upstream']) > 0) {
      $upstreamImages = array_merge($upstreamImages, $service['upstream']);
      if ($service['image']) {
        $producedImages[] = $service['image'];
      }
    } else if ($service['image']) {
      $upstreamImages[] = $service['image'];
    }
  }
  $externalImages = array_diff($upstreamImages, $producedImages, $excludeImages);

  # workspace commands don't allow non-string types
  = join(' ', $externalImages);


command('external-images config [--skip-exists]'):
  env:
    IMAGES: = external_images(docker_service_images())
    SKIP_EXISTS: "= input.option('skip-exists') ? 1 : 0"
  exec: |
    #!php
    $exclude = [];
    if ($env['SKIP_EXISTS']) {
      $exclude = explode("\n", shell_exec('docker images -a --format \'{{ print .Repository ":" .Tag }}\''));
    }
    $include = explode(' ', $env['IMAGES']);
    $compose = ['version' => '3', 'services' => []];
    foreach (array_diff($include, $exclude) as $image) {
      $compose['services'][str_replace(['/', ':'], '_', $image)] = ['image' => $image];
    }
    echo \Symfony\Component\Yaml\Yaml::dump($compose, 100, 2);

command('external-images pull'):
  env:
    EXTERNAL_REGISTRIES: = json_encode(@('docker.external_image_registries'))
  exec: |
    #!php
    foreach (json_decode($env['EXTERNAL_REGISTRIES'], true) as $registry) {
      $pass = escapeshellarg($registry['password']);
      $user = escapeshellarg($registry['username']);
      $url = escapeshellarg($registry['url']);
      $command = "docker login --username=$user --password-stdin $url";
      echo $command . PHP_EOL;
      passthru("echo $pass | $command");
    }

    $confArgs = [];
    if (strlen(@$env['CI']) > 0 || strlen(@$env['BUILD_ID']) > 0) {
      $confArgs[] = "--skip-exists";
    }
    $confArgs = join(' ', array_map('escapeshellarg', $confArgs));

    $command = "ws external-images config $confArgs | docker-compose -f - pull";
    echo $command . PHP_EOL;
    passthru($command);

    foreach (json_decode($env['EXTERNAL_REGISTRIES'], true) as $registry) {
      $url = escapeshellarg($registry['url']);
      $command = "docker logout $url";
      echo $command . PHP_EOL;
      passthru($command);
    }
