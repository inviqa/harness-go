#!/bin/bash

set -e
set -x

function main()
{
    test "$1" "$2"
}

function test()
(
    local mode="$1"
    local goversion="$2"

    local path_harness="."
    local path_test="./.tmp-test"
    local ci_test_path="${path_harness}/.ci/${goversion}/${mode}"

    if [ -d "${path_test}" ]; then
        rm -rf "${path_test}"
    fi

    cp -ap "${ci_test_path}" "${path_test}"
    cd ${path_test}
    mkdir "./.my127ws/"
    cp -ap "../${path_harness}/"* "./.my127ws/"

    local multiplatform="../${ci_test_path}/.multiplatform"
    local harness_docker_context=""
    if [[ -f "${multiplatform}" ]]; then
        harness_docker_context=$(docker buildx create --use)
    fi

    # shellcheck disable=SC2064
    trap "clean '${harness_docker_context}'" EXIT

    ws install

    local lockedversion
    lockedversion=$(ws get go.version)
    if [ "$lockedversion" != "$goversion" ]; then
      echo "Expected a locked go.version value of $goversion, but got $lockedversion."
      exit 1
    fi

    ws helm kubeval qa

    ws disable
    ws enable

    sleep 5
    verify_or_exit "${path_test}" "${ci_test_path}"

    local build_prod="../${ci_test_path}/.build-prod"
    if [[ -f "${build_prod}" ]]; then
        ws build-prod
    fi
)

function verify_or_exit() {
  local path_test="$1"
  local ci_test_path="$2"
  local expected_containers="../${ci_test_path}/.expected_containers"

  # in docker-compose v2, underscores were replaced with dashes as a separator in container names
  if [ ! "$(docker ps -q -f name=ci-go-sample_app)" ] && [ ! "$(docker ps -q -f name=ci-go-sample-app)" ]; then
      echo "The app container has stopped running unexpectedly."
      exit 1
  fi

  if [[ -f "${expected_containers}" ]]; then
    while read -r container; do
      if [ ! "$(docker ps -q -f name=ci-go-sample_"$container")" ]; then
        echo "The ${container} container is not running, but it should be."
        COMPOSE_PROJECT_NAME=ci-go-sample docker-compose logs --tail 100 "$container"
        exit 1
      fi
    done < "${expected_containers}"
  fi
}

function clean()
{
    local path_test="./.tmp-test"
    local docker_context="$1"

    if [ -d "$path_test" ]; then
        (cd $path_test && ws destroy)
        rm -rf $path_test
    fi

    if [ "${docker_context}" != "" ]; then
      docker buildx rm "$docker_context"
    fi
}

main "$@"
