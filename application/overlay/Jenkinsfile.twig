pipeline {
    agent { label 'linux-amd64' }
    environment {
        MY127WS_KEY = credentials('{{ @('jenkins.credentials.my127ws_key') }}')
        MY127WS_ENV = "pipeline"
    }
    triggers { cron(env.BRANCH_NAME == '{{ @('git.main_branch') }}' ? 'H H(2-6) * * 1' : '') }
    stages {
        stage('Build') {
            steps { sh 'ws install' }
        }
        stage('Test')  {
            parallel {
                stage('go mod check') { steps { sh 'ws go mod check' } }
                stage('go fmt') { steps { sh 'ws go fmt check' } }
                stage('go test') { steps { sh 'ws go test' } }
                stage('go vet') { steps { sh 'ws go vet' } }
                stage('go gocyclo') { steps { sh 'ws go gocyclo' } }
                stage('go ineffassign') { steps { sh 'ws go ineffassign' } }
                stage('go gosec') { steps { sh 'ws go gosec' } }
                stage('helm kubeval qa') { steps { sh 'ws helm kubeval qa' } }
            }
        }
        stage('Integration Tests') {
            steps { sh 'ws go test integration' }
        }
        stage('Build for production') {
            steps {
                sh 'ws build-prod'
            }
        }
{% if @('pact.enabled') %}
        stage('Pact PR Publish') {
            when {
                not {
                    anyOf {
                        branch '{{ @('git.main_branch') }}'
                    }
                }
            }
            steps {
                sh 'ws pact publish "${BRANCH_NAME}" "${git rev-parse --short HEAD}"'
            }
        }
{% endif %}
{% if @('pipeline.publish.enabled') == 'yes' %}
        stage('Publish') {
            when {
                not { triggeredBy 'TimerTrigger' }
                anyOf {
                    branch '{{ @('git.main_branch') }}'
                }
            }
            parallel {
                stage("Docker Image") { steps { sh 'ws app publish' } }
{% if @('pact.enabled') %}
                stage("Pact") { steps { sh 'ws pact publish "latest" "${git rev-parse --short HEAD}"' } }
{% endif %}
            }
        }
{% endif %}
{% if @('pipeline.preview.enabled') == 'yes' %}
        stage('Deploy') {
            when { not { triggeredBy 'TimerTrigger' } }
            steps { sh 'ws app deploy preview' }
        }
{% endif %}
{% if @('pipeline.qa.enabled') == 'yes' %}
        stage('Deploy (QA)') {
            environment {
{% for key, value in @('pipeline.qa.environment') %}
                {{ key }} = {{ value|raw }}
{% endfor %}
            }
            when {
                not { triggeredBy 'TimerTrigger' }
                branch '{{ @('pipeline.qa.branch') }}'
            }
            steps {
                sh 'ws app deploy qa'
            }
        }
{% endif %}
    }
    post {
        always {
            sh 'ws destroy'
            cleanWs()
        }
    }
}
